version: '3.8'

services:
  auth_db:
    image: postgres:16-alpine
    restart: on-failure
    environment:
      POSTGRES_USER: ${AUTH_DB_USER}
      POSTGRES_PASSWORD: ${AUTH_DB_PASSWORD}

  posts_db:
    image: postgres:16-alpine
    restart: on-failure
    environment:
      POSTGRES_USER: ${POSTS_DB_USER}
      POSTGRES_PASSWORD: ${POSTS_DB_PASSWORD}

  stats_zookeeper:
    image: confluentinc/cp-zookeeper:7.6.1
    environment:
      ZOOKEEPER_CLIENT_PORT: ${STATS_ZOOKEEPER_PORT}
  
  stats_kafka:
    image: confluentinc/cp-kafka:7.6.1
    depends_on:
      - stats_zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: stats_zookeeper:${STATS_ZOOKEEPER_PORT}
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://stats_kafka:${STATS_KAFKA_PORT}
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1

  auth: # Rust
    build: ./auth
    restart: on-failure
    depends_on:
      - auth_db
      - posts
      - stats_kafka
    environment:
      AUTH_PORT: ${AUTH_PORT}
      POSTS_GRPC_HOST: posts
      POSTS_GRPC_PORT: ${POSTS_GRPC_PORT}
      AUTH_DB_USER: ${AUTH_DB_USER}
      AUTH_DB_PASSWORD: ${AUTH_DB_PASSWORD}
      AUTH_DB_HOST: auth_db
      STATS_KAFKA_HOST: stats_kafka
      STATS_KAFKA_PORT: ${STATS_KAFKA_PORT}
    ports:
      - ${AUTH_PORT}:${AUTH_PORT}

  posts: # Go
    build: ./posts
    restart: on-failure
    depends_on:
      - posts_db
    environment:
      POSTS_GRPC_PORT: ${POSTS_GRPC_PORT}
      POSTS_DB_USER: ${POSTS_DB_USER}
      POSTS_DB_PASSWORD: ${POSTS_DB_PASSWORD}
      POSTS_DB_HOST: posts_db
