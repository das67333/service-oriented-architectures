openapi: '3.0.2'
info:
  title: auth service API
  version: '0.1.0'

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer

paths:
  /signup:
    post:
      summary: Sign up a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                login:
                  type: string
                password:
                  type: string
              required:
                - login
                - password
      responses:
        '200':
          description: OK
        '400':
          description: Missing credential or user already exists
          content:
            text/plain:
              schema:
                type: string
        '500':
          description: Internal server error
          content:
            text/plain:
              schema:
                type: string

  /login:
    post:
      summary: Provide the registered user with an access token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                login:
                  type: string
                password:
                  type: string
              required:
                - login
                - password
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                required:
                  - token
        '400':
          description: Missing credential or user does not exist
          content:
            text/plain:
              schema:
                type: string
        '401':
          description: Wrong credential
          content:
            text/plain:
              schema:
                type: string
        '500':
          description: Internal server error
          content:
            text/plain:
              schema:
                type: string

  /profile:
    put:
      summary: Update personal information
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                first_name:
                  type: string
                last_name:
                  type: string
                birth_date:
                  type: string
                email:
                  type: string
                phone:
                  type: string
              required:
                - first_name
                - last_name
                - birth_date
                - email
                - phone
      responses:
        '200':
          description: OK
        '400':
          description: Invalid token
          content:
            text/plain:
              schema:
                type: string
        '500':
          description: Internal server error
          content:
            text/plain:
              schema:
                type: string

  /post:
    post:
      summary: Create new post
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                content:
                  type: string
              required:
                - content
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  post_id:
                    type: string
                required:
                  - post_id
        '400':
          description: Invalid token
          content:
            text/plain:
              schema:
                type: string
        '500':
          description: Internal server error
          content:
            text/plain:
              schema:
                type: string

  /post/{id}:
    put:
      summary: Update post by id
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                content:
                  type: string
              required:
                - content
      responses:
        '200':
          description: OK
        '400':
          description: Invalid token
          content:
            text/plain:
              schema:
                type: string
        '403':
          description: Access denied
          content:
            text/plain:
              schema:
                type: string
        '404':
          description: Post not found
          content:
            text/plain:
              schema:
                type: string
        '500':
          description: Internal server error
          content:
            text/plain:
              schema:
                type: string

    delete:
      summary: Delete post by id
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      security:
        - BearerAuth: []
      responses:
        '200':
          description: OK
        '400':
          description: Invalid token
          content:
            text/plain:
              schema:
                type: string
        '403':
          description: Access denied
          content:
            text/plain:
              schema:
                type: string
        '404':
          description: Post not found
          content:
            text/plain:
              schema:
                type: string
        '500':
          description: Internal server error
          content:
            text/plain:
              schema:
                type: string

    get:
      summary: Get post by id
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  login:
                    type: string
                  created_at:
                    type: string
                  content:
                    type: string
                required:
                  - login
                  - created_at
                  - content
        '404':
          description: Post not found
          content:
            text/plain:
              schema:
                type: string
        '500':
          description: Internal server error
          content:
            text/plain:
              schema:
                type: string

  /posts:
    get:
      summary: Get a specific user's page of posts
      parameters:
        - in: query
          name: login
          schema:
            type: string
          description: User login
        - in: query
          name: start_id
          schema:
            type: integer
          description: Id of the oldest post
        - in: query
          name: count
          schema:
            type: integer
          description: Number of posts
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                    created_at:
                      type: string
                    content:
                      type: string
                  required:
                    - id
                    - created_at
                    - content
        '404':
          description: User not found
          content:
            text/plain:
              schema:
                type: string
        '500':
          description: Internal server error
          content:
            text/plain:
              schema:
                type: string


  /post/{id}/view:
    post:
      summary: View a post by its id
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      security:
        - BearerAuth: []
      responses:
        '200':
          description: OK
        '400':
          description: Invalid token
          content:
            text/plain:
              schema:
                type: string

  /post/{id}/like:
    post:
      summary: Like a post by its id
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      security:
        - BearerAuth: []
      responses:
        '200':
          description: OK
        '400':
          description: Invalid token
          content:
            text/plain:
              schema:
                type: string

  /stats/post/{id}:
    get:
      summary: Get post's views and likes count
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  views:
                    type: integer
                  likes:
                    type: integer
                required:
                  - id
                  - views
                  - likes

  /stats/top_posts/{category}:
    get:
      summary: Get top 5 posts by category (views or likes)
      parameters:
        - in: path
          name: category
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                    login:
                      type: integer
                    count:
                      type: integer
                  required:
                    - id
                    - login
                    - count

  /stats/top_users:
    get:
      summary: Get top 3 users by total number of likes on their posts
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    login:
                      type: string
                    likes:
                      type: integer
                  required:
                    - login
                    - likes
